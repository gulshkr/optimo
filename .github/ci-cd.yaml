name: Deploy to EC2

on:
  push:
    branches: [ main ]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_KEY: ${{ secrets.EC2_KEY }}
  AWS_REGION: us-east-1
  KMS_KEY_ID: ${{ secrets.KMS_KEY_ID }}  # Add to GitHub secrets

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ env.EC2_KEY }}
        known_hosts: 'just-a-placeholder-so-we-do-not-get-error'

    - name: Install SOPS
      run: |
        curl -LO https://github.com/mozilla/sops/releases/download/v3.7.3/sops-v3.7.3.linux.amd64
        chmod +x sops-v3.7.3.linux.amd64
        sudo mv sops-v3.7.3.linux.amd64 /usr/local/bin/sops

    - name: Decrypt secrets
      run: |
        sops --kms ${{ env.KMS_KEY_ID }} --decrypt envs/.prod.enc.env > envs/.prod.env
      env:
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}

    - name: Run backend tests
      run: |
        cd backend
        pip install poetry
        poetry install
        poetry run pytest

    - name: Transfer files to EC2
      run: |
        # Copy all files except secrets
        rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
          --exclude='envs/.prod.env' \
          --exclude='.env' \
          . ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:/home/ubuntu/app
        
        # Securely transfer secrets
        scp -o StrictHostKeyChecking=no envs/.prod.env ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:/home/ubuntu/app/envs/

    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
        cd /home/ubuntu/app
        chmod 600 envs/.prod.env
        sudo docker-compose down
        sudo docker-compose up -d
        EOF

    - name: Verify deployment
      run: |
        ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
        cd /home/ubuntu/app
        sudo docker-compose exec backend printenv | grep DB
        sudo docker-compose ps
        EOF

    - name: Cleanup secrets
      run: |
        rm -f envs/.prod.env
        ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "
          cd /home/ubuntu/app
          rm -f envs/.prod.env
        "
